/**
*	Template of reporter.js
*	For building for specific environment.
*	Node.js or Browser
*	@param {string}	env	node|browser in wich env it will be running
*	@param {string}	url	URL of report collector
*	@param {string}	key	key to indetificate reporter
*/

<% if (env === 'node'){ %>
const NOT_NODE_ERROR_URL_NODE_DEFAULT = 'https://appmon.ru/api/key/collect';
var NOT_NODE_ERROR_URL_NODE = null;
var NOT_NODE_ERROR_KEY = null;
var config = null;
try{
	config = require('not-config').readerForModule('error');
}catch(e){
	NOT_NODE_ERROR_URL_NODE = '<%-url%>';
	NOT_NODE_ERROR_KEY = '<%-key%>';
}
const https = require('https');
const http = require('http');
const notError = require('./error.node.js');
<% }else{ %>
const NOT_NODE_ERROR_URL_BROWSER = '<%-url%>';
const NOT_NODE_ERROR_KEY = '<%-key%>';
import notError from './error.browser.js';
<% }%>

/**
* Error reporting with features, saving browser info, uri and so on.
* @module not-error/error
*/
class notErrorReporter{
	constructor(envFirst = false){
		this.envFirst = envFirst;
		return this;
	}

	report(error, notSecure){
		let data = this.packError(error);
		return this._report(data, this.getReportURL(), notSecure, 'error');
	}

	reportError(name, opts = {}, parent = null, notSecure){
		return this._report(new notError(name, opts, parent), notSecure);
	}

	packError(error){
		let result = {};
		if (Object.prototype.hasOwnProperty.call(error, 'parent') && typeof error.parent !== 'undefined' && error.parent){
			result.parent = {
				columnNumber:		error.parent.columnNumber,
				fileName:				error.parent.fileName,
				lineNumber:			error.parent.lineNumber,
				name:						error.parent.name,
				message:				error.parent.message,
				stack:					error.parent.stack
			};
		}
		result.details = {
			columnNumber:		error.columnNumber,
			fileName:				error.fileName,
			lineNumber:			error.lineNumber,
			name:						error.name,
			message:				error.message,
			stack:					error.stack
		};
		result.options 	= error.options;
		result.env 			= error.env;
		return result;
	}

<% if (env === 'node'){ %>
<%- include('./reporter.node.ejs'); %>
<% }else{ %>
<%- include('./reporter.browser.ejs'); %>
<% } %>
}

<% if (env === 'node'){ %>
const reporter = new notErrorReporter();

process.on('uncaughtExceptionMonitor', (err, origin) => {
	reporter.reportError(origin, {origin}, e);
});

process.on('unhandledRejection', (reason) => {
	reporter.reportError('unhandledRejection', { reason }, new Error(reson));
});

process.on('warning', (warning) => {
	reporter.reportError(`Warning: ${warning}`, { type: 'warning', warning }, new Error(warning)));
});

process.on('exit', (code) => {
  reporter.reportError(`Server process exit`, { type: 'event', code }, new Error('Shutdown')));
});

module.exports = reporter;
<% }else{ %>
const service = new notErrorReporter();
export default service;
<% }%>
